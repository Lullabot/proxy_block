name: CI

on:
  push:
    branches: [main, '*.x']
  pull_request:
  schedule:
    - cron: '0 6 * * *'

env:
  DRUPAL_ROOT: drupal-root
  MODULE_NAME: ${{ github.event.repository.name }}
  MODULE_PATH: web/modules/contrib/${{ github.event.repository.name }}
  # Composer CI configuration
  COMPOSER_NO_INTERACTION: '1'
  COMPOSER_ALLOW_SUPERUSER: '1'
  # PHPUnit test configuration
  SIMPLETEST_DB: 'mysql://drupal:drupal@127.0.0.1:3306/drupal'
  SIMPLETEST_BASE_URL: 'http://127.0.0.1:8080'
  BROWSERTEST_OUTPUT_DIRECTORY: 'web/sites/simpletest/browser_output'
  MINK_DRIVER_ARGS_WEBDRIVER: '["chrome", {"browserName":"chrome","goog:chromeOptions":{"args":["--disable-gpu","--headless","--no-sandbox","--disable-dev-shm-usage"]}}, "http://127.0.0.1:9515"]'
  SYMFONY_DEPRECATIONS_HELPER: 'ignoreFile=${{ github.workspace }}/drupal-root/.deprecation-ignore.txt'

jobs:
  # Combined Drupal CI Job - Composer, PHPStan, PHPUnit, and E2E Tests
  test:
    name: '🧪 Tests (Drupal ${{ matrix.drupal-core }}, PHP ${{ matrix.php-version }})'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        drupal-core: ['10', '11-dev']
        php-version: ['8.3']
        db-version: ['10.9']

    services:
      mariadb:
        image: mariadb:${{ matrix.db-version }}
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: drupal
          MYSQL_USER: drupal
          MYSQL_PASSWORD: drupal
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: gd, pdo_mysql, mbstring, xml, opcache, mysql, curl, zip, sockets
          tools: composer:v2
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer --global config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.drupal-core }}-${{ matrix.php-version }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ matrix.drupal-core }}-${{ matrix.php-version }}-
            ${{ runner.os }}-composer-

      - name: Create Drupal project
        run: composer create-project drupal/recommended-project:^${{ matrix.drupal-core }} ${{ env.DRUPAL_ROOT }} --no-interaction

      - name: Configure Drupal project
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          # Configure platform PHP version
          composer config platform.php ${{ matrix.php-version }}

          # Add essential development dependencies for Drupal testing
          composer require --dev --no-interaction \
            drupal/core-dev \
            drupal/coder \
            drush/drush \
            phpstan/phpstan \
            mglaman/phpstan-drupal \
            phpstan/phpstan-deprecation-rules

          composer dump-autoload

      - name: Checkout module
        uses: actions/checkout@v4
        with:
          path: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}

      - name: Setup module
        working-directory: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}
        run: |
          composer config --no-plugins allow-plugins.phpstan/extension-installer true
          composer --dev --no-interaction --no-progress install

          # Install Node.js dependencies for E2E tests
          npm ci

      - name: Run PHPCS
        working-directory: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}
        run: |
          composer run-script lint:check

      - name: Run PHPStan
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          php vendor/bin/phpstan.phar \
            --configuration=${{ env.MODULE_PATH }}/phpstan.neon

      - name: Install Drupal
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          echo "=== Installing Drupal site ==="
          echo "Working directory: $(pwd)"
          echo "Web directory exists: $(ls -la web/ | head -5)"

          # Test database connectivity first
          echo "=== Testing database connectivity ==="
          php -r "
            try {
              \$pdo = new PDO('mysql:host=127.0.0.1;port=3306;dbname=drupal', 'drupal', 'drupal');
              echo 'Database connection successful\n';
            } catch (PDOException \$e) {
              echo 'Database connection failed: ' . \$e->getMessage() . '\n';
              exit(1);
            }
          "

          # Ensure proper permissions
          echo "=== Setting up permissions ==="
          chmod 755 web/sites/default
          rm -f web/sites/default/settings.php

          # Install Drupal with verbose output and error handling
          echo "=== Running drush site-install ==="
          
          # Check if drush is working at all
          echo "Testing drush status before installation..."
          php vendor/bin/drush --root="$(pwd)/web" status || echo "Drush status failed (expected before installation)"
          
          echo "Testing drush core requirements..."
          php vendor/bin/drush --root="$(pwd)/web" core:requirements || echo "Core requirements check failed"
          
          # Run the actual installation with better error capture
          echo "Starting site-install..."
          set -x # Enable verbose output
          
          DRUSH_EXIT_CODE=0
          php vendor/bin/drush site-install standard \
            --root="$(pwd)/web" \
            --db-url=mysql://drupal:drupal@127.0.0.1:3306/drupal \
            --account-name=admin \
            --account-pass=admin \
            --site-name="Drupal Test Site" \
            --yes \
            --verbose || DRUSH_EXIT_CODE=$?
          
          set +x # Disable verbose output
          
          # Check if installation failed
          if [ $DRUSH_EXIT_CODE -ne 0 ]; then
            echo "=== Drush installation failed ==="
            echo "Exit code: $DRUSH_EXIT_CODE"
            echo "Directory contents:"
            ls -la web/sites/default/
            echo "Attempting to get more details..."
            php vendor/bin/drush --root="$(pwd)/web" status || echo "Status check failed"
            exit 1
          fi

          echo "=== Installation completed, verifying ==="
          if [ -f "web/sites/default/settings.php" ]; then
            echo "✓ settings.php created successfully"
          else
            echo "✗ settings.php not found - installation failed"
            exit 1
          fi

          php vendor/bin/drush --root="$(pwd)/web" status

      - name: Enable module
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          php vendor/bin/drush cache:rebuild
          php vendor/bin/drush pm:enable ${{ env.MODULE_NAME }} --yes

      - name: Copy deprecation ignore file
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: cp web/core/.deprecation-ignore.txt .

      - name: Create artifact directory for HTML output
        run: |
          mkdir -p ${{ env.DRUPAL_ROOT }}/web/sites/simpletest/browser_output
          chmod 777 ${{ env.DRUPAL_ROOT }}/web/sites/simpletest/browser_output

      - name: Setup Chrome and ChromeDriver (for functional-javascript tests)
        uses: browser-actions/setup-chrome@latest

      - name: Start ChromeDriver
        run: |
          # ChromeDriver is already installed with Chrome
          chromedriver --port=9515 &
          sleep 2

          # Health check for ChromeDriver
          retries=10
          count=0
          until curl -s http://127.0.0.1:9515/status > /dev/null; do
            count=$((count+1))
            if [ ${count} -gt ${retries} ]; then
              echo "ChromeDriver failed to start after ${retries} retries."
              exit 1
            fi
            echo "Waiting for ChromeDriver... (Attempt ${count})"
            sleep 1
          done
          echo "ChromeDriver is ready!"

      - name: Start web server for functional tests
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          php -S 127.0.0.1:8080 -t web > /dev/null 2>&1 &
          sleep 2

      - name: Run Unit tests
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: php vendor/bin/phpunit \
          --configuration ${{ github.workspace }}/${{ env.DRUPAL_ROOT }}/web/core/phpunit.xml.dist \
          ${{ env.MODULE_PATH }}/tests/src/Unit

      - name: Run Kernel tests
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: php vendor/bin/phpunit \
          --configuration ${{ github.workspace }}/${{ env.DRUPAL_ROOT }}/web/core/phpunit.xml.dist \
          ${{ env.MODULE_PATH }}/tests/src/Kernel

      - name: Run Functional tests
        id: functional-tests
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          php vendor/bin/phpunit \
            --configuration ${{ github.workspace }}/${{ env.DRUPAL_ROOT }}/web/core/phpunit.xml.dist \
            ${{ env.MODULE_PATH }}/tests/src/Functional

      - name: Upload HTML artifacts on Functional test failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-html-output-drupal-${{ matrix.drupal-core }}-php-${{ matrix.php-version }}
          path: |
            ${{ env.DRUPAL_ROOT }}/web/sites/simpletest/browser_output/
          retention-days: 14
          if-no-files-found: ignore

      - name: Run FunctionalJavascript tests
        id: functional-js-tests
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          php vendor/bin/phpunit \
            --configuration ${{ github.workspace }}/${{ env.DRUPAL_ROOT }}/web/core/phpunit.xml.dist \
            ${{ env.MODULE_PATH }}/tests/src/FunctionalJavascript

      - name: Upload HTML artifacts on FunctionalJavascript test failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: functional-js-test-html-output-drupal-${{ matrix.drupal-core }}-php-${{ matrix.php-version }}
          path: |
            ${{ env.DRUPAL_ROOT }}/web/sites/simpletest/browser_output/
          retention-days: 14
          if-no-files-found: ignore

      - name: Install Playwright Browsers
        working-directory: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}
        run: npx playwright install chromium

      - name: Verify Drupal Installation
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          echo "=== Verifying Drupal installation ==="

          # Check site status
          echo "Checking drush status..."
          php vendor/bin/drush --root="$(pwd)/web" status

          # Verify homepage works
          echo "Checking homepage..."
          curl -s "http://127.0.0.1:8080/" | head -c 200
          echo ""

          # Check that login page shows actual login form, not installer
          echo "Checking login page..."
          if curl -s "http://127.0.0.1:8080/user/login" | grep -q "install.php"; then
            echo "ERROR: Site is redirecting to installer - installation failed"
            exit 1
          else
            echo "Login page accessible (not redirecting to installer)"
          fi

      - name: Run Playwright E2E Tests (Basic)
        working-directory: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}
        run: |
          # Run basic CI-compatible tests
          npx playwright test tests/e2e/tests/ci-basic.spec.js
        env:
          DRUPAL_BASE_URL: 'http://127.0.0.1:8080'
          CI: 'true'

      - name: Run Playwright E2E Tests (Advanced)
        working-directory: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}
        run: |
          # Run actual proxy block functionality tests (start with block-placement only)
          npx playwright test tests/e2e/tests/block-placement.spec.js
        env:
          DRUPAL_BASE_URL: 'http://127.0.0.1:8080'
          CI: 'true'

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-drupal-${{ matrix.drupal-core }}-php-${{ matrix.php-version }}
          path: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}/playwright-report/
          retention-days: 7

      - name: Upload Playwright Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results-drupal-${{ matrix.drupal-core }}-php-${{ matrix.php-version }}
          path: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}/test-results/
          retention-days: 7

      - name: Upload Playwright Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-drupal-${{ matrix.drupal-core }}-php-${{ matrix.php-version }}
          path: ${{ env.DRUPAL_ROOT }}/${{ env.MODULE_PATH }}/test-results/**/*.png
          retention-days: 14
          if-no-files-found: ignore

  code-quality:
    name: '🔍 Code Quality (ESLint, Stylelint, CSpell)'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node.js dependencies
        run: npm install --include=dev

      - name: Run Code Quality Checks
        run: |
          npm run check
